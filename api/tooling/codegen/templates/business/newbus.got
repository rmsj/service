// Package {{.DomainLower}}bus provides business access to device {{.DomainLower}} domain.
package {{.DomainLower}}bus

import (
	"context"
	"errors"
	"fmt"

	"github.com/google/uuid"

	"github.com/homeguardian-ai/hg-engine/business/sdk/ctxtime"
	"github.com/homeguardian-ai/hg-engine/business/sdk/id"
	"github.com/homeguardian-ai/hg-engine/business/sdk/order"
	"github.com/homeguardian-ai/hg-engine/business/sdk/page"
	"github.com/homeguardian-ai/hg-engine/business/sdk/sqldb"
	"github.com/homeguardian-ai/hg-engine/foundation/logger"
	"github.com/homeguardian-ai/hg-engine/foundation/otel"
)

// ErrNotFound is the error variables for CRUD operations.
var (
	ErrNotFound = errors.New("{{.DomainLower}} not found")
)

// Storer interface declares the behavior this package needs to persist and
// retrieve data.
type Storer interface {
	NewWithTx(tx sqldb.CommitRollbacker) (Storer, error)
	Create(ctx context.Context, {{.DomainLower}} {{.DomainUpper}}) error
	Update(ctx context.Context, {{.DomainLower}} {{.DomainUpper}}) error
	Delete(ctx context.Context, {{.DomainLower}} {{.DomainUpper}}) error
	Query(ctx context.Context, filter QueryFilter, orderBy order.By, page page.Page) ([]{{.DomainUpper}}, error)
	Count(ctx context.Context, filter QueryFilter) (int, error)
	QueryByID(ctx context.Context, {{.DomainLower}}ID uuid.UUID) ({{.DomainUpper}}, error)
}

// Business manages the set of APIs for {{.DomainLower}} access.
type Business struct {
	log    *logger.Logger
	storer Storer
}

// NewBusiness constructs a {{.DomainLower}} domain API for use.
func NewBusiness(log *logger.Logger, storer Storer) *Business {
	b := Business{
		log:    log,
		storer: storer,
	}

	return &b
}

// NewWithTx constructs a new business value that will use the
// specified transaction in any store related calls.
func (b *Business) NewWithTx(tx sqldb.CommitRollbacker) (*Business, error) {
	storer, err := b.storer.NewWithTx(tx)
	if err != nil {
		return nil, err
	}

	bus := Business{
		log:    b.log,
		storer: storer,
	}

	return &bus, nil
}

// Create adds a new {{.DomainLower}} to the system.
func (b *Business) Create(ctx context.Context, {{.DomainNewVar}} New{{.DomainUpper}}) ({{.DomainUpper}}, error) {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.create")
	defer span.End()

	now := ctxtime.GetTime(ctx)

	{{.DomainVar}}DB := {{.DomainUpper}}{
		ID:        id.New(),
		UpdatedAt: now,
		CreatedAt: now,
	}

	if err := b.storer.Create(ctx, {{.DomainVar}}DB); err != nil {
		return {{.DomainUpper}}{}, fmt.Errorf("create {{.DomainLower}}: %w", err)
	}

	return {{.DomainVar}}DB, nil
}

// Update modifies information about a {{.DomainLower}}.
func (b *Business) Update(ctx context.Context, {{.DomainVar}} {{.DomainUpper}}, {{.DomainUpdVar}} Update{{.DomainUpper}}) ({{.DomainUpper}}, error) {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.update")
	defer span.End()

	{{.DomainVar}}.UpdatedAt = ctxtime.GetTime(ctx)

	if err := b.storer.Update(ctx, {{.DomainVar}}); err != nil {
		return {{.DomainUpper}}{}, fmt.Errorf("update: %w", err)
	}

	return {{.DomainVar}}, nil
}

// Delete removes the specified {{.DomainLower}}.
func (b *Business) Delete(ctx context.Context, {{.DomainVar}} {{.DomainUpper}}) error {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.delete")
	defer span.End()

	now := ctxtime.GetTime(ctx)
	if err := b.storer.Delete(ctx, {{.DomainVar}}); err != nil {
		return fmt.Errorf("delete: %w", err)
	}

	return nil
}

// Query retrieves a list of existing {{.DomainLower}}s.
func (b *Business) Query(ctx context.Context, filter QueryFilter, orderBy order.By, page page.Page) ([]{{.DomainUpper}}, error) {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.query")
	defer span.End()

	{{.DomainVar}}s, err := b.storer.Query(ctx, filter, orderBy, page)
	if err != nil {
		return nil, fmt.Errorf("query: %w", err)
	}

	return {{.DomainVar}}s, nil
}

// Count returns the total number of {{.DomainLower}}s.
func (b *Business) Count(ctx context.Context, filter QueryFilter) (int, error) {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.count")
	defer span.End()

	return b.storer.Count(ctx, filter)
}

// QueryByID finds the {{.DomainLower}} by the specified ID.
func (b *Business) QueryByID(ctx context.Context, {{.DomainVar}}ID uuid.UUID) ({{.DomainUpper}}, error) {
	ctx, span := otel.AddSpan(ctx, "business.{{.DomainLower}}bus.querybyid")
	defer span.End()

	{{.DomainVar}}, err := b.storer.QueryByID(ctx, {{.DomainVar}}ID)
	if err != nil {
		return {{.DomainUpper}}{}, fmt.Errorf("query: {{.DomainVar}}ID[%d]: %w", {{.DomainVar}}ID, err)
	}

	return {{.DomainVar}}, nil
}
